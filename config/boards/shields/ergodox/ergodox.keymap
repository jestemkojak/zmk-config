/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define HYPER(key) LS(LC(LA(LG(key))))

#define BASE 0
#define NUMB 1
#define SYMB 2
#define MEDI 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        mlt: my_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
			bindings = <
            &none     &kp N1      &kp   N2    &kp   N3     &kp    N4     &kp N5  &none           &none    &kp  N6 &kp    N7     &kp     N8    &kp N9  &kp  N0  &none
            &none     &kp  Q      &kp    W    &kp    E     &kp     R     &kp  T  &kp HYPER(D)    &kp LBKT &kp  Y  &kp     U     &kp      I    &kp  O  &kp  P  &kp RBKT
            &none     &hm LGUI A &hm LALT S &hm LCTRL D &hm LSHIFT F &kp  G                           &kp  H  &hm RSHIFT J &hm RCTRL K &hm RALT L &hm RGUI SEMI &kp SQT
            &kp LSHFT &kp  Z  &kp  X    &kp  C  &kp  V  &kp  B  &kp LS(LG(A))                    &none    &kp  N  &kp     M     &kp  COMMA   &kp DOT &kp FSLH &kp RSHFT
            &none     &none   &none     &none   &lt MEDI ESC                                      &kp DEL &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR
                                                &kp PG_UP  &kp PG_DN               &none &none
                                        &kp SPACE &mlt NUMB TAB  &none                   &none  &mlt SYMB RET &mlt NUMB BSPC
                                                            &none                  &none
			>;
        };

        numb {
			bindings = <
            &none &kp F1    &kp F2 &kp F3 &kp F4 &kp F5   &none        &none &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11
            &none &kp LBKT  &kp N7 &kp N8 &kp N9 &kp RBKT &none        &none &none &none &none &none &none &kp F12
            &none &kp SEMI  &kp N4 &kp N5 &kp N6 &kp EQUAL                &kp LEFT &kp DOWN &kp UP &kp RIGHT &none &none
            &none &kp GRAVE &kp N1 &kp N2 &kp N3 &kp BSLH &none        &none &none &none &none &none &none &none
            &none &none &none &none &none                                          &none &none &none &none &none
                                               &none &none             &none &none
                                    &kp N0 &kp MINUS &none             &none &none &none
                                                     &none             &none
			>;
        };

        symb {
			bindings = <
            &none &none &none &none &none &none &none                      &none &none &none &none &none &none &none
            &none &kp LBRC  &kp AMPS &kp STAR  &kp LPAR  &kp RBRC &none    &none &none &none &none &none &none &none
            &none &kp COLON &kp DLLR &kp PRCNT &kp CARET &kp PLUS                &none &none &none &none &none &none
            &none &kp TILDE &kp EXCL &kp   AT  &kp HASH  &kp PIPE &none    &none &none &none &none &none &none &none
            &none &none &none &none &kp LPAR                                           &none &none &none &none &none
                                                 &none &none                &none &none
                                    &kp RPAR &kp UNDER &none                &none &none &none
                                                       &none                &none
			>;
        };

        medi {
			bindings = <
            &none &none &none &none &none &none &none    &none &none &none &none &none &none &none
            &none &none &none &none &none &none &none    &none &none &none &none &none &none &none
            &none &none &none &none &none &none                &none &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none
            &none &none &none &none &none &none &none    &none &none &none &none &none &none &none
            &none &none &none &none &none                            &kp C_MUTE &none &none &none &none
                                          &none &none    &none &none
                                    &none &none &none    &none &kp C_STOP  &kp C_PP
                                                &none    &none
			>;
        };

        /*
        empty {
			bindings = <
            &none &none &none &none &none &none &none    &none &none &none &none &none &none &none
            &none &none &none &none &none &none &none    &none &none &none &none &none &none &none
            &none &none &none &none &none &none                &none &none &none &none &none &none
            &none &none &none &none &none &none &none    &none &none &none &none &none &none &none
            &none &none &none &none &none                            &none &none &none &none &none
                                          &none &none    &none &none
                                    &none &none &none    &none &none &none
                                                &none    &none
			>;
        };
        */
    };
};
